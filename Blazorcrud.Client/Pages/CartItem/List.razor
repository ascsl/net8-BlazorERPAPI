@page "/cartitem/{Page}"
@inject Services.ICartItemService cartItemService
@inject Services.IUserService UserService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Blazorcrud.Client.Shared.PageHistoryState PageHistoryState

<h1>CartItems</h1>
<br />

@if (listRegister == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:30%">Title</th>
                <th style="width:15%">Price</th>
                <th style="width:10%">Count</th>
                <th style="width:5%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in listRegister.Results)
            {
                <tr>
                    <td>@row.Product.Title</td>
                    <td>@row.Product.Price</td>
                    <td>@row.Count</td>
                    <td style="white-space: nowrap">
                        @if (LoggedIn)
                        {
                            <button class="btn btn-primary" @onclick="() => DecrementQuantity(row)" disabled="@(!activateDecrement)">-</button>
                            <button class="btn btn-primary" @onclick="() => IncrementQuantity(row)" disabled="@(!activateIncrement)">+</button>
                            @if (row.IsDeleting)
                            {
                                <button @onclick="@(() => Delete(row))" disabled="@row.IsDeleting" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                    <span class="spinner-border spinner-border-sm"></span>
                                </button>
                            }
                            else
                            {
                                <button @onclick="@(() => Delete(row))" disabled="@row.IsDeleting" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                    <span></span>
                                </button>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pager Result=@listRegister PageChanged=PagerPageChanged />
}

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    int quantity { get; set; } = 1;
    int maxQuantity { get; set; } = 5;
    bool activateDecrement { get; set; } = false;
    bool activateIncrement { get; set; } = true;

    protected PagedResult<CartItem> listRegister;

    public bool LoggedIn
    {
//        get { return UserService.User != null; }
        get { return true; }
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("Client.Pages.Category.List, OnInitialized:");
        Console.WriteLine(UriHelper.Uri);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Client.Pages.Category.List, OnParametersSetAsync:");
        try
        {
            Console.WriteLine($"Client.Pages.CartItem.List, OnParametersSetAsync try: {SearchTerm}, {Page}");
            listRegister = await cartItemService.GetCartItems(null, Page);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Client.Pages.CartItem.List, OnParametersSetAsync catch: Error al obtener datos: {ex.Message}");
            listRegister = new PagedResult<CartItem>();
        }
        finally
        {
            Console.WriteLine($"Client.Pages.CartItem.List, OnParametersSetAsync fin: StateHasChanged()");
            StateHasChanged();
        }
    }

    protected void PagerPageChanged(int page)
    {
        Console.WriteLine("Client.Pages.CartItem.List, PagerPageChanged:");
        UriHelper.NavigateTo("/cartitem/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected void IncrementQuantity(CartItem _row)
    {
        if (_row.Count < maxQuantity)
        {
            _row.Count++;
            activateDecrement = true;

            if (_row.Count >= maxQuantity)
            {
                activateIncrement = false;
            }
        }
        StateHasChanged();
    }

    protected void DecrementQuantity(CartItem _row)
    {
        if (_row.Count > 1)
        {
            _row.Count--;
            activateIncrement = true;

            if (_row.Count < 2)
            {
                activateDecrement = false;
            }
        }
        StateHasChanged();
    }

    protected void OnQuantityChanged(ChangeEventArgs e)
    {
        activateDecrement = quantity > 1;
        activateIncrement = quantity < maxQuantity;
        StateHasChanged();
    }

    private async void Delete(CartItem _row)
    {
        Console.WriteLine("Client.Pages.CartItem.List, Delete:");
        var row = _row;
        row.IsDeleting = true;
        try
        {
            await cartItemService.Delete(row.ProductId);
            listRegister = await cartItemService.GetCartItems(SearchTerm, Page);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
}
